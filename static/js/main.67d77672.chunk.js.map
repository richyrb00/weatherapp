{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","data","weather","fetch","process","then","res","json","setState","catch","console","log","this","undefined","name","main","clouds","coord","sys","wind","className","data-api","description","icon","src","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"kOAsDeA,G,kNAlDbC,MAAQ,CACNC,KAAM,GACNC,QAAS,I,kEAGU,IAAD,OAClBC,MAAM,wEAAD,OACqEC,mCADrE,kBAGFC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACJ,GACL,EAAKO,SAAS,CAAEP,KAAMA,IACtB,EAAKO,SAAS,CAAEN,QAASD,EAAKC,QAAQ,QAEvCO,MAAMC,QAAQC,O,+BAGT,IAAD,EACsBC,KAAKZ,MAA1BC,YADD,WACQY,EADR,IAEyBD,KAAKZ,MAA7BE,eAFD,WAEWW,EAFX,EAKP,GAFAH,QAAQC,IAAI,MAAOP,oCAEfH,GAAQC,EAAS,CAAC,IAAD,EAC8BU,KAAKZ,MAAMC,KAA/Ba,GADV,EACXC,KADW,EACLC,OADK,EACGC,MADH,EACUH,MADV,EACgBI,IADhB,EACqBC,KAGxC,OAFAT,QAAQC,IAAI,OAAQC,KAAKZ,MAAMC,MAC/BS,QAAQC,IAAI,UAAWC,KAAKZ,MAAME,SAEhC,yBAAKkB,UAAU,MAAMC,WAAU,CAACjB,qCAC9B,4BAAQgB,UAAU,cAChB,4BAAKN,GAEL,2BAAIF,KAAKZ,MAAME,QAAQoB,aAEtBV,KAAKZ,MAAME,QAAQqB,KAClB,yBACEC,IAAG,iBAAYZ,KAAKZ,MAAME,QAAQqB,KAA/B,QACHE,IAAKb,KAAKZ,MAAME,QAAQoB,YACxBF,UAAU,iBAEV,MAEN,gCAIJ,OAAO,4C,GA9CKM,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdhC,OAAM,SAAAiC,GACLhC,QAAQgC,MAAMA,EAAMC,a","file":"static/js/main.67d77672.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    data: [],\n    weather: [],\n  };\n\n  componentDidMount() {\n    fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=Knutsford,uk&appid=${process.env.REACT_APP_WEATHERAPI}&units=metric`\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        this.setState({ data: data });\n        this.setState({ weather: data.weather[0] });\n      })\n      .catch(console.log);\n  }\n\n  render() {\n    const { data = undefined } = this.state;\n    const { weather = undefined } = this.state;\n    console.log(\"env\", process.env.REACT_APP_WEATHERAPI);\n\n    if (data && weather) {\n      const { main, clouds, coord, name, sys, wind } = this.state.data;\n      console.log(\"data\", this.state.data);\n      console.log(\"weather\", this.state.weather);\n      return (\n        <div className=\"App\" data-api={[process.env.REACT_APP_WEATHERAPI]}>\n          <header className=\"App-header\">\n            <h1>{name}</h1>\n\n            <p>{this.state.weather.description}</p>\n\n            {this.state.weather.icon ? (\n              <img\n                src={`images/${this.state.weather.icon}.png`}\n                alt={this.state.weather.description}\n                className=\"weather-icon\"\n              />\n            ) : null}\n          </header>\n          <main></main>\n        </div>\n      );\n    } else {\n      return <div>Loading</div>;\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}