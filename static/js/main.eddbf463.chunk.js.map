{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","Geocode","setApiKey","process","setLanguage","enableDebug","fromAddress","state","location_input","then","response","results","geometry","location","lat","lng","location_name","address_components","long_name","fetch","res","json","data","weather","current","location_input_show","search_count","catch","console","log","error","getHourlyTemp","i","hourlyData","hourly","hourlyTempArray","push","temp","current_hour","Date","getHours","hours","toDate","fromDate","setTime","getTime","result","this","undefined","main","clouds","coord","sys","wind","temp_chart","labels","getHoursCount","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","className","onSubmit","type","onChange","description","icon","src","alt","Math","floor","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.eddbf463.chunk.js","sourcesContent":["import React, { Component, Fragment, useState } from \"react\";\nimport Geocode from \"react-geocode\";\nimport \"./App.css\";\nimport { Line } from \"react-chartjs-2\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      current_hour: new Date().getHours(),\n      search_count: 0,\n      data: [],\n      weather: [],\n      lat: \"\",\n      lng: \"\",\n      location_name: \"\",\n      location_input: \"\",\n      location_input_show: true,\n    };\n    // this.handleChange = this.handleChange.bind(this);\n    // this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    Geocode.setApiKey(`${process.env.REACT_APP_GOOGLEAPI}`);\n\n    // set response language. Defaults to english.\n    Geocode.setLanguage(\"en\");\n\n    // set response region. Its optional.\n    // A Geocoding request with region=es (Spain) will return the Spanish city.\n    // Geocode.setRegion(\"gb\");\n\n    // Enable or disable logs. Its optional.\n    Geocode.enableDebug();\n\n    // Get latidude & longitude from address.\n    Geocode.fromAddress(this.state.location_input).then(\n      (response) => {\n        const { lat, lng } = response.results[0].geometry.location;\n        this.setState({ lat: lat });\n        this.setState({ lng: lng });\n        this.setState({\n          location_name: response.results[0].address_components[0].long_name,\n        });\n        fetch(\n          `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lng}&appid=${process.env.REACT_APP_WEATHERAPI}&units=metric`\n        )\n          .then((res) => res.json())\n          .then((data) => {\n            this.setState({ data: data });\n            this.setState({ weather: data.current.weather[0] });\n            this.setState({ location_input_show: false });\n            this.setState({ search_count: this.state.search_count + 1 });\n          })\n          .catch(console.log);\n      },\n      (error) => {\n        console.error(error);\n      }\n    );\n  };\n\n  getHourlyTemp = () => {\n    let i;\n    let hourlyData = this.state.data.hourly;\n    let hourlyTempArray = [];\n    for (i in hourlyData) {\n      hourlyTempArray.push(hourlyData[i].temp);\n    }\n    return hourlyTempArray;\n  };\n\n  getHoursCount(hours) {\n    var toDate = new Date();\n    var fromDate = new Date();\n    toDate.setTime(toDate.getTime() + hours * 60 * 60 * 1000);\n    var result = [];\n\n    while (fromDate <= toDate) {\n      result.push(fromDate.getHours());\n      // consider using moment.js library to format date\n\n      fromDate.setTime(fromDate.getTime() + 1 * 60 * 60 * 1000);\n    }\n\n    return result;\n  }\n\n  render() {\n    const {\n      data = undefined,\n      location_name = undefined,\n      weather = undefined,\n      location_input,\n    } = this.state;\n    const {\n      main,\n      clouds,\n      coord,\n      name,\n      sys,\n      wind,\n      current,\n      hourly,\n    } = this.state.data;\n\n    let temp_chart = {\n      labels: this.getHoursCount(48),\n      datasets: [\n        {\n          label: \"Temperature\",\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: \"#9b2c2c\",\n          borderColor: \"#9b2c2c\",\n          borderCapStyle: \"butt\",\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: \"miter\",\n          pointBorderColor: \"#9b2c2c\",\n          pointBackgroundColor: \"#fff\",\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: \"#c53030\",\n          pointHoverBorderColor: \"#c53030\",\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          data: this.getHourlyTemp(hourly),\n        },\n      ],\n    };\n\n    return (\n      <div className=\"App\">\n        <div\n          className={`h-screen w-screen z-50 flex content-center items-center align-center justify-center fixed bg-white ${\n            this.state.location_input_show ? null : \"hidden\"\n          }`}\n        >\n          <div className=\"w-full md:w-6/12 lg:w-3/12 mx-6\">\n            <h2 className=\"text-2xl mb-6\">Enter Location</h2>\n            <form onSubmit={this.handleSubmit}>\n              <input\n                type=\"text\"\n                name=\"location_input\"\n                value={this.state.location_input}\n                onChange={this.handleChange}\n                className=\"text-black bg-gray-200 focus:outline-none focus:shadow-outline border border-gray-300 rounded-lg py-2 px-4 block w-full appearance-none leading-normal\"\n              />\n            </form>\n          </div>\n        </div>\n        <header>\n          <div className=\"bg-blue-900 py-16\">\n            {location_name ? (\n              <h1 className=\"text-white text-3xl font-bold mb-2\">\n                {location_name}\n              </h1>\n            ) : null}\n            {weather.description ? (\n              <p className=\"text-white text-lg\">{weather.description}</p>\n            ) : null}\n            <div className=\"m-auto mt-6 mb-0 w-full px-6 flex content-center items-center align-center justify-center\">\n              {weather.icon ? (\n                <img\n                  src={`images/${weather.icon}.png`}\n                  alt={weather.description}\n                  className=\"weather-icon text-center rounded-full bg-white\"\n                />\n              ) : null}\n              {current ? (\n                <div>\n                  <span className=\"ml-6 text-5xl text-white font-bold\">\n                    {Math.floor(current.temp)}&#8451;\n                  </span>\n                </div>\n              ) : null}\n            </div>\n          </div>\n        </header>\n        <main className=\"flex items-center justify-center\">\n          <div className=\"w-fill p-6 md:w-3/6 lg:w-3/6 relative\">\n            <Line data={temp_chart} />\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./tailwind.generated.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}